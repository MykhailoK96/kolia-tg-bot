const TelegramBot = require("node-telegram-bot-api");

const admin = require("firebase-admin");
const serviceAccount = require("./serviceAccountKey.json");
const token = "7357801251:AAFmyD_JSEblhbx1Y3x_RCrr18WBHmErCKo";

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://kolia-tg-bot-default-rtdb.firebaseio.com/",
});

const db = admin.firestore();

const bot = new TelegramBot(token, { polling: true });

bot.setMyCommands([{ command: "/menu", description: "–ú–µ–Ω—é—à–∫–∞" }]);

const userStates = {};

async function getAvailableBooks() {
  const booksRef = db.collection("books");
  const snapshot = await booksRef.where("isAvailable", "==", true).get();

  if (snapshot.empty) {
    return [];
  }

  let books = [];
  snapshot.forEach((doc) => {
    books.push({ id: doc.id, ...doc.data() });
  });

  return books;
}

async function bookBook(bookId, userId) {
  const bookRef = db.collection("books").doc(bookId);
  const doc = await bookRef.get();

  if (!doc.exists) {
    throw new Error("–ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
  }

  await bookRef.update({ isAvailable: false, bookedBy: userId });
}

async function getUserBooking(userId) {
  const booksRef = db.collection("books");
  const snapshot = await booksRef.where("bookedBy", "==", userId).get();

  if (snapshot.empty) {
    return null;
  }

  let booking = null;
  snapshot.forEach((doc) => {
    booking = { id: doc.id, ...doc.data() };
  });

  return booking;
}

async function cancelBooking(userId) {
  const booksRef = db.collection("books");
  const snapshot = await booksRef.where("bookedBy", "==", userId).get();

  if (snapshot.empty) {
    throw new Error("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å");
  }

  let bookId = null;
  snapshot.forEach((doc) => {
    bookId = doc.id;
  });

  await booksRef.doc(bookId).update({
    isAvailable: true,
    bookedBy: admin.firestore.FieldValue.delete(),
  });
}

async function isBookAvailable(bookId) {
  const bookRef = db.collection("books").doc(bookId);
  const doc = await bookRef.get();

  if (!doc.exists) {
    throw new Error("–ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
  }

  return doc.data().isAvailable;
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const response = {
    text: `
      –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤—Å–µ—Ö —Å–º–æ—Ç—Ä—è—â–∏—Ö, –Ω—É –∏ —Ç–µ–±–µ, ${msg.from.first_name}! üëã
      
      –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–Ω–∏–∑—É. –†–∞–±–æ—Ç–∞–µ–º –±—Ä–∞—Ç—å—è
    `,
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏", callback_data: "list_books" }],
        [{ text: "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–Ω–∏–≥—É", callback_data: "book_book" }],
        [
          {
            text: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
            callback_data: "view_booking",
          },
        ],
        [{ text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", callback_data: "cancel_booking" }],
      ],
    },
  };
  bot.sendMessage(chatId, response.text, {
    reply_markup: response.reply_markup,
  });
});

bot.onText(/\/menu/, (msg) => {
  const chatId = msg.chat.id;
  const response = {
    text: "–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:",
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏", callback_data: "list_books" }],
        [{ text: "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–Ω–∏–≥—É", callback_data: "book_book" }],
        [
          {
            text: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
            callback_data: "view_booking",
          },
        ],
        [{ text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", callback_data: "cancel_booking" }],
      ],
    },
  };
  bot.sendMessage(chatId, response.text, {
    reply_markup: response.reply_markup,
  });
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const action = query.data;

  switch (action) {
    case "list_books":
      const books = await getAvailableBooks();
      let response = "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏:\n\n";
      books.forEach((book) => {
        response += `${book.id}: ${book.author} - "${book.title}"  \n`;
      });
      if (books.length === 0) response = "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.";
      const res = {
        text: response,
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–Ω–∏–≥—É", callback_data: "book_book" }],
          ],
        },
      };
      bot.sendMessage(chatId, res.text, {
        reply_markup: res.reply_markup,
      });
      break;

    case "book_book":
      const userBooking = await getUserBooking(query.from.id);
      if (userBooking) {
        const res = {
          text: "–£ –≤–∞—Å –≤–∂–µ —î –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞ –∫–Ω–∏–≥–∞.",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
                  callback_data: "cancel_booking",
                },
              ],
            ],
          },
        };
        bot.sendMessage(chatId, res.text, {
          reply_markup: res.reply_markup,
        });
      } else {
        userStates[chatId] = "waiting_for_book_id";
        bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.");
      }
      break;

    case "view_booking":
      const booking = await getUserBooking(query.from.id);
      if (booking) {
        bot.sendMessage(
          chatId,
          `–í–∞—à–∞ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞ –∫–Ω–∏–≥–∞: ${booking.title} - ${booking.author}`
        );
      } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö –∫–Ω–∏–≥.");
      }
      break;

    case "cancel_booking":
      try {
        await cancelBooking(query.from.id);
        bot.sendMessage(chatId, "–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ.");
      } catch (error) {
        bot.sendMessage(
          chatId,
          `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: ${error.message}`
        );
      }
      break;

    case "sosav":
      bot.sendMessage(chatId, "–•–∞—Ö–∞, –ø—Ä–∏–∑–Ω–∞–≤—Å—è, –º–æ–ª–æ–¥–µ—Ü—å");

      break;

    default:
      bot.sendMessage(
        chatId,
        "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å /menu –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
      );
      break;
  }
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (userStates[chatId] === "waiting_for_book_id") {
    const bookId = text;
    try {
      const available = await isBookAvailable(bookId);
      if (!available) {
        const response = {
          text: "–°—Ç–∞—Ä–∏–Ω–∞, –∞ –Ω–∞—à–æ —á—É–∂—É –∫–Ω–∏–∂–∫—É —Ö–æ—á–µ—à –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏? –°–æ—Å–∞–≤?",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–î–∞",
                  callback_data: "sosav",
                },
              ],
              [
                {
                  text: "–ë—É–ª–æ –¥—ñ–ª–æ",
                  callback_data: "sosav",
                },
              ],
              [
                {
                  text: "–ù—É –¥–∞, —ñ —à–æ?",
                  callback_data: "sosav",
                },
              ],
            ],
          },
        };
        bot.sendMessage(
          chatId,
          response.text,
          {
            reply_markup: response.reply_markup,
          }
          //   "–°—Ç–∞—Ä–∏–Ω–∞, –∞ –Ω–∞—à–æ —á—É–∂—É –∫–Ω–∏–∂–∫—É —Ö–æ—á–µ—à –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏? –°–æ—Å–∞–≤?"
        );
        delete userStates[chatId];
        return;
      }

      await bookBook(bookId, msg.from.id);
      bot.sendMessage(
        chatId,
        `–ö–Ω–∏–≥–∞ –∑ –Ω–æ–º–µ—Ä–æ–º ${bookId} —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞.`
      );
    } catch (error) {
      bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ –∫–Ω–∏–≥–∏: ${error.message}`);
    }
    delete userStates[chatId];
    return;
  }

  if (!["/start", "/menu"].includes(text)) {
    bot.sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞");
  }
});
